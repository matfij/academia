@using System.Timers;
@using Microsoft.Maui.Controls
@using SkiaSharp
@using SkiaSharp.Views.Maui
@using MauiSkiaSharp.Services;

@inject ParticleService particleService;

@code {
    private Timer? timer;
    private SKCanvasView canvasView = new()
        {
            WidthRequest = 1000,
            HeightRequest = 600,
        };

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            SetupCanvas();
            SetupTimer();
        }
    }

    private void SetupTimer()
    {
        timer = new Timer(10); // ~100fps;
        timer.Elapsed += (sender, args) => InvokeAsync(() =>
        {
            canvasView.InvalidateSurface();
        });
        timer.Start();
    }

    private void SetupCanvas()
    {
        canvasView.EnableTouchEvents = true;
        canvasView.PaintSurface += OnPaintSurface;
        canvasView.Touch += OnTouch;
        var contentPage = Application.Current?.MainPage as ContentPage;
        if (contentPage != null)
        {
            contentPage.Content = canvasView;
        }
    }

    private void OnPaintSurface(object? sender, SKPaintSurfaceEventArgs args)
    {
        var canvas = args.Surface.Canvas;
        canvas.Clear(SKColors.Black);

        using var paint = new SKPaint { Color = SKColors.White, IsAntialias = true };

        foreach (var particle in particleService.GetParticles)
        {
            canvas.DrawCircle(particle.X, particle.Y, particle.R, paint);
        }
    }

    private void OnTouch(object? sender, SKTouchEventArgs args)
    {
        if (args.ActionType != SKTouchAction.Pressed || args.MouseButton != SKMouseButton.Left)
        {
            return;
        }
        particleService.AddParticle(
        new Particle(
        (float)(10 * Math.Round((decimal)args.Location.X / 10)),
        (float)(10 * Math.Round((decimal)args.Location.Y / 10))
        ));
    }
}
